#include <Tinyfont.h>
#include <ArduboyTones.h>
#include <Arduboy2.h>

Arduboy2 arduboy;
ArduboyTones sound(arduboy.audio.enabled);
Tinyfont tinyfont = Tinyfont(arduboy.sBuffer, Arduboy2::width(), Arduboy2::height());

const unsigned char skull[] PROGMEM = {
  0x00, 0x00, 0x04, 0x04, 0xe8, 0x10, 0xe8, 0xe8, 0x08, 0xe8, 0xe8, 0x10, 0xe8, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x60, 0x20, 0x10, 0x0d, 0x12, 0x1e, 0x12, 0x1e, 0x12, 0x0d, 0x10, 0x20, 0x60, 0x00,
};

const unsigned char explosion[] PROGMEM = {
  0x87, 0x78, 0x00, 0x8f, 0x70, 0x03, 0xff, 0xff, 0xff, 0xff, 0x01, 0xfc, 0x02, 0x31, 0xec, 0x03,
  0x03, 0xc4, 0x38, 0x83, 0x78, 0x03, 0xff, 0xff, 0xff, 0xff, 0x1e, 0x84, 0x71, 0x0e, 0xe0, 0x1f,
  0x00, 0xff, 0x00, 0x7f, 0x80, 0x7f, 0xff, 0xff, 0xff, 0x1f, 0x40, 0xbf, 0x00, 0xff, 0x00, 0x00,
  0x0f, 0x10, 0xe6, 0x09, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0x03, 0xbc, 0x40, 0x1f, 0xe0,
  0x00, 0xff, 0x00, 0xfe, 0x01, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0xfc, 0x07, 0xf0, 0x0f, 0x00,
  0xf0, 0x0f, 0xe0, 0x1f, 0x60, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0x7f, 0x80, 0x00,
  0x01, 0x0e, 0xf8, 0x03, 0xfc, 0x01, 0xcf, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x0f, 0xf0, 0x07, 0xf8,
  0x80, 0x60, 0x1f, 0xc0, 0x3f, 0x80, 0xe7, 0xff, 0xff, 0xff, 0x83, 0x3c, 0x42, 0x99, 0x64, 0x83,
};

const unsigned char gameOver[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
0xa0, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xff,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xa0, 0x9f, 0x90, 0x90, 0x90, 0x90,
0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x50, 0x30, 0xf0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xff,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x01, 0x01, 0xff, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0x80, 0x40, 0x3f, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char start[] PROGMEM = {
  0x07, 0x05, 0x7d, 0x41, 0x7d, 0x05, 0x07, 0x00, 0x7f, 0x41, 0x75, 0x15, 0x75, 0x41, 0x7f, 0x00,
  0x7f, 0x41, 0x7d, 0x41, 0x5f, 0x41, 0x7f, 0x00, 0x7f, 0x41, 0x63, 0x49, 0x7f, 0x00, 0x00, 0x00,
  0x7f, 0x41, 0x75, 0x1d, 0x07, 0x00, 0x7f, 0x41, 0x5d, 0x41, 0x7f, 0x00, 0x7f, 0x41, 0x75, 0x11,
  0x77, 0x44, 0x7c, 0x00, 0x7f, 0x41, 0x5d, 0x55, 0x77, 0x00, 0x7f, 0x41, 0x55, 0x5d, 0x77, 0x00,
  0x00, 0x00, 0x7f, 0x41, 0x5d, 0x41, 0x7f, 0x00, 0x7f, 0x41, 0x7d, 0x41, 0x5f, 0x41, 0x7f, 0x00,
  0x7f, 0x41, 0x55, 0x5d, 0x77, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x22, 0x77, 0x22, 0x88, 0xdc,
  0x88, 0x22, 0x77, 0x22, 0x88, 0xdc, 0x88, 0x22, 0x77, 0x22, 0x88, 0xdc, 0x88, 0x22, 0x77, 0x22,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x22, 0x77, 0x22, 0x88, 0xdd,
  0x88, 0x22, 0x77, 0x22, 0x88, 0xdd, 0x88, 0x22, 0x77, 0x22, 0x88, 0xdd, 0x88, 0x22, 0x77, 0x22,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x26, 0x21, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x26, 0x3a, 0x2a, 0x2a, 0x2e, 0x24, 0x24, 0x24, 0x24,
  0x20, 0x20, 0x20, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x22, 0x77, 0x22, 0x08, 0x1d,
  0x08, 0x22, 0x77, 0x22, 0x08, 0x1d, 0x08, 0x22, 0x77, 0x22, 0x08, 0x1d, 0x08, 0x22, 0x77, 0x22,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x80, 0xc0, 0x60, 0x21, 0x21, 0x21, 0x21, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
  0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
  0x21, 0x40, 0x5e, 0x40, 0x5e, 0x5e, 0x40, 0x3f, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x1e, 0xd2, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x22,
  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
  0x22, 0x22, 0x32, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x80,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
  0xf0, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x80, 0x80, 0xe0, 0x60, 0x38, 0x30, 0x38, 0x50, 0x98, 0x10,
  0x0c, 0x08, 0x0c, 0x08, 0x0c, 0x08, 0x06, 0x04, 0x06, 0x34, 0x4e, 0x4c, 0x36, 0x04, 0x06, 0x04,
  0x06, 0x04, 0x06, 0x04, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x1b, 0x26, 0x27, 0x1a, 0x03, 0x02,
  0x03, 0x02, 0x03, 0x02, 0x06, 0x04, 0x06, 0x04, 0x06, 0x04, 0x36, 0x4c, 0x4e, 0x34, 0x06, 0x04,
  0x06, 0x08, 0x0c, 0x08, 0x0c, 0x08, 0x0c, 0x10, 0x90, 0x58, 0x30, 0x38, 0x30, 0x70, 0xc0, 0xc0,
  0x00, 0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0xe0, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
  0x03, 0x1c, 0x60, 0x80, 0x80, 0x85, 0x87, 0x9f, 0x98, 0xf0, 0xe7, 0xa5, 0xa7, 0x90, 0x88, 0x87,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x87, 0x88, 0x90, 0xa7, 0xa5, 0xe7, 0xf0, 0x98, 0x9f,
  0x47, 0x25, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x04, 0x18,
  0x10, 0x7c, 0x62, 0xea, 0x62, 0xdc, 0x40, 0xc0, 0x40, 0xdc, 0x62, 0xea, 0x62, 0xdc, 0x40, 0xc0,
  0x40, 0xdc, 0x62, 0xea, 0x62, 0xdc, 0x40, 0xc0, 0x40, 0xdc, 0x62, 0xea, 0x62, 0xdc, 0x40, 0xc0,
  0x40, 0xdc, 0x62, 0xea, 0x62, 0xdc, 0x40, 0xc0, 0x40, 0xdc, 0x62, 0xea, 0x62, 0xdc, 0x40, 0xc0,
  0x40, 0xdc, 0x62, 0xea, 0x62, 0x7c, 0x10, 0x18, 0x04, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
};

byte screen = 1;
byte landY[17];
byte rightY = 64;
int tankX[] = {-8, 8, 8, -8, -8};
int tankY[] = {-4, -4, 4, 4, -4};
int eTankX[] = {-4, 4, 4, -4, -4};
int eTankY[] = {-4, -4, 4, 4, -4};
int rot = 0;
byte tx = 0;
float ty = 0;
int wRot = 90;
float bulletX = 0;
float bulletY = 0;
boolean bulletState = false;
int bulletDir = 0;
float xspd = 3;
float yspd = 2;
float gravity = 0.2;
float resistance = 0.05;
byte enemyX = 0;
byte enemyY = 0;
boolean enemyState = false;
int enemyRot = 0;
byte last = 0;
unsigned int points = 0;
byte mortarX = 200;
boolean mortarState = true;
int timer = 0;

void setup() {
  arduboy.begin();
  arduboy.setFrameRate(30);
  arduboy.initRandomSeed();
  arduboy.clear();
  initLand();
  spawnEnemy();
}

void loop() {
  if (!(arduboy.nextFrame())) {
    return;
  }
  arduboy.pollButtons();
  arduboy.clear();
  
  if (screen == 0) {
    toggleSound();
    setEnemyRot();
    destroyBulletOutOfBounds();
    killEnemy();
    setTankRot();
    setTankY();
    moveBullet();
    moveTank();
    moveGun();
    shoot();
    drawLand();
    destroyBulletTerrainCollision();
    drawMortarZone();
    mortarExplode();
    drawVectorRot(tx, ty, tankX, tankY, 5, 100, 100, rot);
    if (enemyState) {
      drawVectorRot(enemyX, enemyY, eTankX, eTankY, 5, 100, 100, enemyRot);
    }
    drawGun();
    drawBullet();
    drawUI();
  }
  if (screen == 1) {
    arduboy.drawBitmap(0, 0, start, 128, 64, WHITE);
    if (arduboy.justPressed(A_BUTTON)) {
      screen = 0;
    }
  }
  if (screen == 2) {
    arduboy.drawBitmap(0, 0, gameOver, 128, 64, WHITE);
    tinyfont.setCursor(60, 18);
    tinyfont.print(points);
    if (arduboy.justPressed(A_BUTTON)) {
      screen = 1;
      points = 0;
      last = 0;
    }
  }
  arduboy.display();
}

void mortarExplode() {
  if (mortarState) {
    sound.tone(70, 66);
    arduboy.drawBitmap(mortarX -8, -arduboy.frameCount % 64, explosion, 16, 64, WHITE);
    arduboy.drawBitmap(mortarX -8, (-arduboy.frameCount % 64) - 64, explosion, 16, 64, WHITE);
    if (arduboy.frameCount - timer > 30) {
      mortarX = random(tx - 16, tx + 16);
      mortarState = false;
      timer = arduboy.frameCount;
    }
  }
}

void drawMortarZone() {
  if (!mortarState) {
    if (arduboy.everyXFrames(2)) {
      arduboy.drawBitmap(mortarX - 8, 10, skull, 16, 16, WHITE);
    }
    arduboy.drawFastVLine(mortarX - 8, 6, 58, WHITE);
    arduboy.drawFastVLine(mortarX + 8, 6, 58, WHITE);
    if (arduboy.frameCount - timer > 60) {
      mortarState = true;
      timer = arduboy.frameCount;
      if (tx < mortarX + 8 and tx > mortarX - 8) {
        sound.tone(300, 150, 150, 150, 50, 150);
        screen = 2;
      }
    }
  }
}

void drawUI() {
  arduboy.fillRect(0, 0, 128, 5, BLACK);
  tinyfont.setCursor(0, 0);
  tinyfont.print("LAST:");
  tinyfont.print(last);
  tinyfont.setCursor(48, 0);
  tinyfont.print("POINTS:");
  tinyfont.print(points);
}

void destroyBulletTerrainCollision() {
  if (bulletState) {
    for (int y = 0; y < bulletY; y++) {
      if (arduboy.getPixel(bulletX, y) == WHITE and y <= bulletY) {
        bulletState = false;
        sound.tone(50, 125);
        int i = bulletX / 8;
        landY[i] += 4;
        if (landY[i] > 63) {
          landY[i] = 63;
        }
        return;
      }
    }
  }
}

void killEnemy() {
  if (bulletState and enemyState) {
    Rect rectEnemy{enemyX - 5, enemyY - 5, 10, 10};
    Point pointBullet{bulletX, bulletY};
    if (arduboy.collide(pointBullet, rectEnemy)) {
      last = abs(enemyX - tx);
      points += last;
      bulletState = false;
      enemyState = false;
      sound.tone(50, 100, 40, 100);
    }
  }
}

void destroyBulletOutOfBounds() {
  if (bulletState) {
    if (bulletX > 128 or bulletX < 0) {
      bulletState = false;
    }
    if (bulletY > 64) {
      bulletState = false;
    }
  }
}

void setEnemyRot() {
  if (enemyState) {
    enemyRot = getAngle(enemyX - (enemyX % 8), landY[enemyX/8], (enemyX + 8) - (enemyX % 8), landY[(enemyX/8)+1]);
  }
}

void spawnEnemy() {
  if (!enemyState) {
    enemyState = true;
    enemyX = random(64, 120);

    
  byte x1 = enemyX - (enemyX % 8);
  byte y1 = landY[enemyX/8];
  
  byte x2 = (enemyX + 8) - (enemyX % 8);
  byte y2 = landY[(enemyX/8)+1];

  float m1 = y2 - y1;
  float m2 = x2 - x1;
  float m = m1/m2;
  float b = y1 - (x1 * m);

  float fEnemyX = enemyX;
  enemyY = ((m * fEnemyX) + b)-3;
  }
}

void moveBullet() {
  if (bulletState) {
    bulletX = bulletX + lendirX(xspd, bulletDir);
    bulletY = bulletY + lendirY(yspd, bulletDir);
  }
  xspd -= resistance;
  yspd -= gravity;
  yspd -= resistance;
  if (xspd < 0) {
    xspd = 0;
  }
  if (xspd <= 0 and yspd <= 0) {
    bulletState = false;
  }
}

void shoot() {
  if (arduboy.justPressed(A_BUTTON)) {
    if (!bulletState) {
      sound.tone(750, 75);
      bulletState = true;
      bulletDir = rot + wRot;
      bulletX = tx + lendirX(10, bulletDir);
      bulletY = ty + lendirY(10, bulletDir);
      xspd = 5;
      yspd = 5;
    }
  }
}
void drawBullet() {
  if (bulletState) {
    //arduboy.fillCircle(bulletX, bulletY, 1, WHITE);
    arduboy.drawPixel(bulletX, bulletY, WHITE);
  }
}

void drawGun() {
  arduboy.drawLine(tx, ty, tx + lendirX(10, rot + wRot), ty + lendirY(10, rot + wRot), WHITE);
}

void setTankY() {
  byte x1 = tx - (tx % 8);
  byte y1 = landY[tx/8];
  
  byte x2 = (tx + 8) - (tx % 8);
  byte y2 = landY[(tx/8)+1];

  float m1 = y2 - y1;
  float m2 = x2 - x1;
  float m = m1/m2;
  float b = y1 - (x1 * m);

  float ftx = tx;
  ty = ((m * ftx) + b)-3;
}

void setTankRot() {
  rot = getAngle(tx - (tx % 8), landY[tx/8], (tx + 8) - (tx % 8), landY[(tx/8)+1]);
}

void moveTank() {
  if (arduboy.pressed(UP_BUTTON)) {
    tx++;
  }
  if (arduboy.pressed(DOWN_BUTTON)) {
    tx--;
  }
  if (tx < 8) {
    tx = 8;
  }
  if (tx > 127) {
    tx = 0;
    initLand();
    bulletState = false;
    enemyState = false;
    spawnEnemy();
    mortarX = 200;
    mortarState = false;
    timer = arduboy.frameCount;
  }
  if (enemyX - tx < 10 and enemyState) {
    tx--;
  }
}

void initLand() {
  byte lastY = rightY;
  for (int i = 0; i < 17; i++) {
    landY[i] = lastY;
    lastY += random(-8, 9);
    if (lastY < 16) {
      lastY = 16;
    }
    if (lastY > 63) {
      lastY = 63;
    }
  }
  rightY = landY[16];
}

void moveGun() {
  if (arduboy.pressed(RIGHT_BUTTON)) {
    wRot -= 1;
  }
  if (arduboy.pressed(LEFT_BUTTON)) {
    wRot += 1;
  }
  if (wRot > 180) {
    wRot = 180;
  }
  if (wRot < 0) {
    wRot = 0;
  }
}

void drawLand() {
  for (int i = 0; i < 16; i++) {
    arduboy.drawLine(8 * i, landY[i], 8 * (i+1), landY[i+1], WHITE);
  }
}

void incRot() {
  rot++;
  if (rot >= 360) {
    rot = 0;
  }
}

float lendirX(int len, int dir) {
  dir = ((dir % 360) + 360) % 360;
  dir = dir - 360;
  
  if (dir < 90) {
    return (cos(dir * (3.14159265359f / 180.0f)) * len);
  }
  if (dir > 90 and dir < 180) {
    return -(cos(dir * (3.14159265359f / 180.0f)) * len);
  }
  if (dir > 180 and dir < 270) {
    return -(cos(dir * (3.14159265359f / 180.0f)) * len);
  }
  if (dir > 270) {
    return (cos(dir * (3.14159265359f / 180.0f)) * len);
  }
  if (dir == 0 or dir == 360) {
    return len;
  }
  if (dir == 90 or dir == 270) {
    return 0;
  }
  if (dir == 180) {
    return - len;
  }
}

float lendirY(int len, int dir) {
  dir = ((dir % 360) + 360) % 360;
  dir = dir - 360;

  if (dir < 90) {
    return -(sin(dir * (3.14159265359f / 180.0f)) * len);
  }
  if (dir > 90 and dir < 180) {
    return -(sin(dir * (3.14159265359f / 180.0f)) * len);
  }
  if (dir > 180 and dir < 270) {
    return (sin(dir * (3.14159265359f / 180.0f)) * len);
  }
  if (dir > 270) {
    return (sin(dir * (3.14159265359f / 180.0f)) * len);
  }
  if (dir == 0 or dir == 360 or dir == 180) {
    return 0;
  }
  if (dir == 90) {
    return - len;
  }
  if (dir == 270) {
    return len;
  }
}

void drawVectorRot(int xc, int yc, int x[], int y[],byte len, int xscale, int yscale, int rot) {
  for (int i = 0; i <= len-2; i++) {
    int leni = getDistance(0, 0, x[i], y[i]);
    int diri = getAngle(0, 0, x[i], y[i]);

    int lenii = getDistance(0, 0, x[i+1], y[i+1]);
    int dirii = getAngle(0, 0, x[i+1], y[i+1]);

    arduboy.drawLine(xc + lendirX(leni * xscale/100, diri + rot), yc + lendirY(leni * yscale/100, diri + rot), xc + lendirX(lenii * xscale/100, dirii + rot), yc + lendirY(lenii * yscale/100, dirii + rot), WHITE);
  }
}

byte getDistance(int x1, int y1, int x2, int y2) {
  int dx = max(x1, x2) - min(x1, x2);
  int dy = max(y1, y2) - min(y1, y2);

  return sqrt(sq(dx) + sq(dy));
}

int getAngle(int x1, int y1, int x2, int y2) {
  int angle = (atan2(y1 - y2, x1 - x2) * 180 / 3.14159265359f);
  angle = (((-(angle + 180)) % 360)+ 360)% 360;
  return angle;
}

void toggleSound() {
  if (arduboy.justPressed(B_BUTTON)) {
    arduboy.audio.toggle();
    sound.tone(1000, 50);
    arduboy.audio.saveOnOff();
  }
}
